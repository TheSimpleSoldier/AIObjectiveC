//
//  HeuristicFunctions.m
//  PolarTicTacToe
//
//  Created by Fred Kneeland on 9/29/14.
//  Copyright (c) 2014 Fred Kneeland. All rights reserved.
//

#import "HeuristicFunctions.h"
#import "Utilities.h"

@implementation HeuristicFunctions

//Value will center around 0. 999 means the team won, -999 means the team lost. negative numbers mean the other team is doing better.
+(int) getValue:(int *)gameboard :(int)team
{
    @autoreleasepool {
        int value = 0;

        int winner = 0; 
        //Look for how many unrestricted lines each player has and determine who is in better shape from there
        int k, a, t;

        //Check for vertical lines
        for(k = 0; k < 12; k++)
        {
            int x = 1; int y = 1;
            int winX = 0;
            int winY = 0;
            for(a = 0; a < 4; a++)
            {
                if(gameboard[k*4 + a] == 1)
                {
                    y = 0;
                    winX++;
                }
                else if(gameboard[k*4 + a] == 2)
                {
                    x = 0;
                    winY++;
                }
            }

            if(winX == 4)
            {
                winner = 1;
                value = 999;
                break;
            }
            else if(winY == 4)
            {
                winner = 1;
                value = -999;
                break;
            }

            if(x && !y)
            {
                value++;
            }
            else if(!x && y)
            {
                value--;
            }
        }

        if(winner == 0)
        {
            //Check for diagonal lines
            for(k = 0; k < 12; k++)
            {
                int x = 1;
                int y = 1;
                int winX = 0; 
                int winY = 0;
                for(a = 0; a < 4; a++)
                {
                        if(gameboard[((k + a) % 12)*4 + a] == 1)
                        {
                            y = 0;
                            winX++;
                        }
                        else if(gameboard[((k + a) % 12)*4 + a] == 2)
                        {
                            x = 0;
                            winY++;
                        }
                }
        
                if(x && !y)
                {
                    value++;
                }
                else if(!x && y)
                {
                    value--;
                }
        
                x = 1;
                y = 1;
                for(a = 0; a < 4; a++)
                {
                        if(gameboard[((12 + k - a) % 12)*4 + a] == 1)
                        {
                            y = 0;
                        }
                        else if(gameboard[((12 + k - a) % 12)*4 + a] == 2)
                        {
                            x = 0;
                        }
                }
        
                if(winX == 4)
                {
                    winner = 1;
                    value = 999;
                    break;
                }
                else if(winY == 4)
                {
                    winner = 1;
                    value = -999;
                    break;
                }

                if(x && !y)
                {
                    value++;
                }
                else if(!x && y)
                {
                    value--;
                }
            }
        }

        if(winner == 0)
        {
            //Check for horizontal
            for(a = 0; a < 4; a++)
            {
                for(k = 0; k < 12; k++)
                {
                    int x = 1;
                    int y = 1;
                    int winX = 0;
                    int winY = 0;
        
                    for(t = 0; t < 4; t++)
                    {
                        if(gameboard[((k + t) % 12)*4 + a] == 1)
                        {
                            y = 0;
                            winX++;
                        }
                        else if(gameboard[((k + t) % 12)*4 + a] == 2)
                        {
                            x = 0;
                            winY++;
                        }
                    }

                    if(winX == 4)
                    {
                        winner = 1;
                        value = 999;
                        break;
                    }
                    else if(winY == 4)
                    {
                        winner = 1;
                        value = -999;
                        break;
                    }
        
                    if(x && !y)
                    {
                        value++;
                    }
                    else if(!x && y)
                    {
                        value--;
                    }
                }

                if(winner == 1)
                {
                    break;
                }
            }
        }
        
        if(team == 2)
        {
            value *= -1;
        }

        return value;
    }
}

+(int) decisionTreeChecker:(int *)gameboard :(int)team
{
    @autoreleasepool {
        //The tree will be represented as an array
        //Negative numbers mean to return that value
        NSArray *tree = [NSArray arrayWithObjects:               @"1,2,-15",
                     @"5,6,-13",                                 @"8,9,-14",                                  @"-15,-15,-15",
        @"-1,-5,-9",@"-2,-6,-10",@"-13,-13,-13",   @"-3,-7,-11",@"-4,-8,-12",@"-14,-14,-14",   @"-15,-15,-15",@"-15,-15,-15",@"-15,-15,-15",
        nil];
        //This is used to decide the next child
        int deciders[] = {1,2,3};

        //Get class info to put in decision tree
        int teamOneWin[] = {0,0,0,0};
        int teamTwoWin[] = {0,0,0,0};

        int k, a, t;
        //Check for vertical lines
        for(k = 0; k < 12; k++)
        {
            int winX = 0;
            int winY = 0;
            for(a = 0; a < 4; a++)
            {
                if(gameboard[k*4 + a] == 1)
                {
                    winX++;
                }
                else if(gameboard[k*4 + a] == 2)
                {
                    winY++;
                }
            }

            if(winX > 0 && winY == 0)
            {
                teamOneWin[4 - winX] = teamOneWin[4 - winX] + 1;
            }
            else if(winY > 0 && winX == 0)
            {
                teamTwoWin[4 - winY] = teamTwoWin[4 - winY] + 1;
            }
        }

        //Check for diagonal lines
        for(k = 0; k < 12; k++)
        {
            int winX = 0; 
            int winY = 0;
            for(a = 0; a < 4; a++)
            {
                    if(gameboard[((k + a) % 12)*4 + a] == 1)
                    {
                        winX++;
                    }
                    else if(gameboard[((k + a) % 12)*4 + a] == 2)
                    {
                        winY++;
                    }
            }
            
            if(winX > 0 && winY == 0)
            {
                teamOneWin[4 - winX] = teamOneWin[4 - winX] + 1;
            }
            else if(winY > 0 && winX == 0)
            {
                teamTwoWin[4 - winY] = teamTwoWin[4 - winY] + 1;
            }

            winX = 0;
            winY = 0;

            for(a = 0; a < 4; a++)
            {
                    if(gameboard[((12 + k - a) % 12)*4 + a] == 1)
                    {
                        winX++;
                    }
                    else if(gameboard[((12 + k - a) % 12)*4 + a] == 2)
                    {
                        winY++;
                    }
            }
            
            if(winX > 0 && winY == 0)
            {
                teamOneWin[4 - winX] = teamOneWin[4 - winX] + 1;
            }
            else if(winY > 0 && winX == 0)
            {
                teamTwoWin[4 - winY] = teamTwoWin[4 - winY] + 1;
            }
        }

        //Check for horizontal
        for(a = 0; a < 4; a++)
        {
            for(k = 0; k < 12; k++)
            {
                int winX = 0;
                int winY = 0;

                for(t = 0; t < 4; t++)
                {
                    if(gameboard[((k + t) % 12)*4 + a] == 1)
                    {
                        winX++;
                    }
                    else if(gameboard[((k + t) % 12)*4 + a] == 2)
                    {
                        winY++;
                    }
                }
                
                if(winX > 0 && winY == 0)
                {
                    teamOneWin[4 - winX] = teamOneWin[4 - winX] + 1;
                }
                else if(winY > 0 && winX == 0)
                {
                    teamTwoWin[4 - winY] = teamTwoWin[4 - winY] + 1;
                }
            }
        }

        //Look for win
        if(teamOneWin[0] > 0)
        {
            if(team == 1)
            {
                return 999;
            }
            else
            {
                return -999;
            }
        }
        else if(teamTwoWin[0] > 0)
        {
            if(team == 2)
            {
                return 999;
            }
            else
            {
                return -999;
            }
        }

        //Plug in values to get guess for each team
        int teamOne = 0;
        int teamTwo = 0;

        int level = 0;
        int spot = 0;
        while(teamOne == 0)
        {
            NSArray *children = [NSArray arrayWithArray:[[tree objectAtIndex:spot] componentsSeparatedByString:@","]];
            if(teamOneWin[level + 1] > deciders[level])
            {
                int value = [[children objectAtIndex:2] intValue];
                if(value < 0)
                {
                    teamOne = value * -1;
                }
                else
                {
                    spot = value;
                }
            }
            else if(teamOneWin[level + 1] == deciders[level])
            {
                int value = [[children objectAtIndex:1] intValue];
                if(value < 0)
                {
                    teamOne = value * -1;
                }
                else
                {
                    spot = value;
                }
            }
            else
            {
                int value = [[children objectAtIndex:0] intValue];
                if(value < 0)
                {
                    teamOne = value * -1;
                }
                else
                {
                    spot = value;
                }
            }
            level++;
        }

        level = 0;
        spot = 0;
        while(teamTwo == 0)
        {
            NSArray *children = [NSArray arrayWithArray:[[tree objectAtIndex:spot] componentsSeparatedByString:@","]];
            if(teamTwoWin[level + 1] > deciders[level])
            {
                int value = [[children objectAtIndex:2] intValue];
                if(value < 0)
                {
                    teamTwo = value * -1;
                }
                else
                {
                    spot = value;
                }
            }
            else if(teamTwoWin[level + 1] == deciders[level])
            {
                int value = [[children objectAtIndex:1] intValue];
                if(value < 0)
                {
                    teamTwo = value * -1;
                }
                else
                {
                    spot = value;
                }
            }
            else
            {
                int value = [[children objectAtIndex:0] intValue];
                if(value < 0)
                {
                    teamTwo = value * -1;
                }
                else
                {
                    spot = value;
                }
            }
            level++;
        }

        //Compare values and return prediction
        if(teamOne == teamTwo)
        {
            for(k = 1; k < 4; k++)
            {
                if(teamOneWin[k] > teamTwoWin[k])
                {
                    teamOne = 16;
                    break;
                }
                else if(teamOneWin[k] < teamTwoWin[k])
                {
                    teamTwo = 16;
                    break;
                }
            }
        }
        if(team == 1)
        {
            if(teamOne > teamTwo)
            {
                return 999;
            }
            else
            {
                return -999;
            }
        }
        else
        {
            if(teamTwo > teamOne)
            {
                return 999;
            }
            else
            {
                return -999;
            }
        }
    }
}

//function returns values from neural net
+(int) evaluate:(int *)gameBoard :(int)team
{
    @autoreleasepool {
        //Check for winner
        int winner = [Utilities checkWin:gameBoard];
        if(winner == 1)
        {
            if(team == 1)
            {
                return 999;
            }
            else
            {
                return -999;
            }
        }
        else if(winner == 2)
        {
            if(team == 1)
            {
                return -999;
            }
            else
            {
                return 999;
            }
        }


        int inputLayer = 48;
        int innerLayer = 40;
        int outputLayer = 2;
        //Net used
        float netWeights[48 * 40 + 40 * 2] = {-1.039212,-0.994066,-0.897030,-0.634548,-0.206109,-0.800211,-0.803801,-0.054727,-0.000497,-0.184310,-0.572913,0.695207,0.875822,0.150571,0.156517,-0.932978,0.603202,-0.952092,-0.511922,-0.401299,0.782437,0.018275,0.852441,0.096981,0.610860,-0.632409,0.787409,0.164457,-0.864090,0.664290,0.856802,-0.814576,0.791351,0.530301,-0.878938,-0.494723,-0.986974,-0.244001,0.330697,0.374357,0.526569,-0.953448,0.127817,-0.700544,0.145152,0.403769,-0.552686,0.056906,-0.056941,-0.480164,0.334047,-0.222214,0.950694,-0.414946,-0.101713,-0.057519,0.050658,0.263688,-0.743607,0.568125,0.825876,0.730252,-0.825646,1.032320,-0.299355,-0.884444,-0.522878,-0.795824,0.388142,0.508673,-0.039721,-0.000648,-0.025480,0.290377,0.233227,0.739039,0.182783,0.966382,-0.273984,-0.334419,-0.641189,-0.678149,0.604817,0.792304,0.683340,0.921529,-0.479877,0.726280,-0.936402,-1.266354,-1.263160,-0.383551,0.422582,-0.476979,-1.016472,0.152791,0.395123,-0.173071,-0.537479,0.637423,0.566189,0.886202,-0.540532,0.791823,0.134752,-0.740112,-0.368651,0.590456,1.023898,0.320458,-0.033761,0.363726,-0.850738,0.856161,-1.291092,0.829544,0.458210,0.500952,-0.586782,0.399514,0.825089,0.522763,-0.166258,0.872253,0.762595,-0.116228,-0.810403,-0.154092,0.070217,-0.675350,0.222322,0.539423,-0.674714,0.222118,0.954450,-0.352990,0.877045,-0.194609,0.905846,0.958149,-0.384623,-0.083096,0.404584,0.801488,0.504813,0.538423,-0.855286,0.714500,-0.662357,-0.854887,-0.280766,-0.362268,-0.310059,-0.169056,-0.561220,-0.164447,-0.292693,-0.949589,-0.276743,-0.916946,-0.464475,0.120720,-0.038890,0.763531,0.563499,-0.661638,-0.736608,0.202795,-0.195402,0.012558,0.215990,0.396147,-1.022629,0.868066,-0.212653,0.235838,-0.687261,0.837518,-0.746860,-0.664984,-0.767477,-0.720901,0.963293,0.303687,0.669355,0.294859,-0.182901,0.519691,0.698773,0.459521,0.322502,-0.255590,0.297762,-0.027848,0.598049,0.535446,-0.569605,-1.012254,0.125000,0.027383,0.244330,-0.583886,-0.501622,-0.014398,0.209296,0.207731,-0.107158,0.369817,0.132441,0.752881,-0.557050,-0.464568,-0.514651,-1.296301,0.529786,1.099011,-0.576522,0.248753,0.860538,-0.137279,0.192018,0.238950,0.016917,-0.165239,-0.609587,-0.546939,-1.035842,-0.410900,0.186535,0.887281,-0.016097,0.035801,-0.299982,0.388532,-0.138500,-0.886259,-0.160048,-0.666910,0.100745,0.757439,0.924715,0.207583,0.877967,-1.060732,0.531695,0.782464,-0.783464,-0.939136,-0.909600,-0.295013,0.756493,-0.893332,0.720118,0.961198,0.409720,0.276503,-0.756873,-0.729979,-0.899425,0.077442,0.398699,-0.083529,0.126799,0.328605,0.435215,-0.438094,-0.155649,-0.747196,0.050807,0.095262,-0.882904,0.446474,0.826161,-1.020859,0.652657,0.991747,-1.153656,0.951680,-1.017108,-0.851040,-0.594245,-0.556155,-0.268936,0.358994,-0.594839,0.203161,0.375583,-0.169524,-0.335780,-0.282487,0.455099,0.452077,-0.535989,-0.660963,1.080049,0.472499,-0.568267,0.292958,-0.268234,-1.030695,0.699306,-0.956640,-1.057110,-0.241538,-0.067956,0.010529,0.919497,0.158897,0.739268,0.348834,0.488133,0.926784,-0.955917,-0.487730,-1.175616,-0.937305,-0.792467,-0.925088,0.396060,0.918938,-0.796280,0.200934,-0.751915,0.189063,-0.873238,-0.548244,-0.165576,0.965630,-0.283792,-0.958656,0.973905,0.531396,0.806607,-0.205408,0.630427,-0.915038,-0.589230,-0.171267,0.919833,0.118978,0.150909,0.012974,-0.061703,0.580278,-0.398246,-0.186396,-0.864638,-0.654835,0.350715,-0.584655,0.818859,0.259633,-0.414857,-0.675457,0.689506,-0.080930,0.183958,0.941508,0.038147,0.786119,0.459881,-0.533476,0.016706,-0.460435,1.036515,-0.896754,0.722995,0.656990,-0.843331,0.058967,-0.829069,0.492896,0.641729,-0.630553,0.872048,-1.171015,-0.506042,0.008031,0.398168,0.923250,-0.909158,-0.057895,-0.009581,0.251179,0.714740,0.483766,0.390423,0.500980,-0.534346,0.676243,0.434454,0.390353,-0.040747,-0.367236,-0.706960,0.055680,0.055897,0.521650,-0.840467,-0.938322,0.615618,-0.721164,0.810072,-0.795310,-0.930239,0.625903,0.510520,-0.339097,0.041405,-0.389060,0.717808,-0.190453,-0.718346,0.705778,-0.131190,0.838925,-0.692856,-0.043510,0.117413,0.618932,-0.474168,0.858310,-0.852391,0.022520,-0.850034,-0.804244,-0.069934,0.192960,-0.802842,-0.942088,0.027499,-0.189911,-0.074606,-0.195492,-0.974555,-0.290663,0.898344,0.007325,0.921397,0.803635,-0.916203,-0.438484,-0.600891,0.467130,-0.892095,0.578824,-0.460326,-0.125634,0.145347,0.087499,0.468798,0.405524,0.462374,0.478169,0.090974,0.636641,-0.977262,0.111150,0.639352,0.141793,0.746882,-0.564965,0.346702,-0.815497,-0.904133,-0.473329,0.085630,-0.433393,-0.210160,-0.605693,-0.662720,-0.910599,-0.833592,-0.178010,0.491598,-0.566923,-0.643049,-1.069348,-0.474376,-0.189879,0.564267,-0.164328,0.304413,-0.005520,-0.426065,-0.582814,-0.175180,0.426275,0.458095,0.482780,-0.719625,0.059514,0.214882,0.819225,0.241068,-0.294473,-0.071666,0.924610,0.835904,0.510472,0.340911,-0.502555,-0.402245,0.485961,0.346953,-0.241524,-1.080032,-0.292153,0.258971,-0.718043,-0.820915,0.177403,-0.892521,-0.632092,-0.711055,-0.356714,-0.219609,-0.546599,-0.024115,0.631474,-0.194109,0.401785,0.338437,0.214235,-0.749312,0.494121,-0.654508,-1.065456,-0.449666,-0.526633,-0.574355,0.050377,-0.321737,0.684933,-0.146857,-0.903599,-0.749510,0.065168,0.269356,0.831338,0.807052,-0.336054,-0.227950,0.471607,-0.936118,-0.732253,-0.188889,0.784053,0.598762,0.284116,0.498028,0.605585,0.022419,0.081398,0.407041,-0.145092,0.473699,-0.345157,-0.476566,-0.915633,-0.632357,-0.086457,-0.579648,0.820045,-0.396051,-0.382354,-0.643650,0.670776,0.749743,0.010053,-0.587075,0.498141,-1.084120,-0.578411,-0.509639,-0.663288,-0.561951,0.565612,-0.819430,-0.474263,0.805557,-0.588732,0.276174,0.371248,0.603339,-0.333586,0.141735,-0.616018,-0.963227,0.513558,-0.095907,-0.265573,0.542364,0.544745,-0.116367,0.330545,-0.251004,-0.984397,-0.238687,0.882558,0.264454,0.604371,0.594035,0.151573,0.841645,0.019092,-0.605897,0.054935,-0.786433,-0.231912,0.569143,0.573954,-0.978685,0.791164,-0.853412,-0.279904,0.428316,-0.451208,-0.340816,-0.203463,-0.615760,-0.248612,0.020893,-1.259876,-0.076284,-0.638939,-0.026782,0.237960,1.120367,-0.882783,-1.111502,-0.522409,0.850356,-1.083941,0.362027,0.098248,-0.495591,0.811705,-0.536413,0.433586,0.359753,0.058845,0.260169,0.113598,0.267905,-0.233639,0.752725,-0.473500,-0.251651,0.118087,-0.389694,0.652092,-0.518028,-0.336625,0.248985,-0.862194,-0.701597,-0.448574,0.404786,0.389663,-0.547624,0.370031,-0.714503,-0.349317,0.644126,-0.617957,-0.156242,0.445491,-0.840501,0.192027,-0.082727,0.892490,-0.087520,0.759945,0.790358,0.411677,0.760198,0.806992,-0.694070,-0.761368,0.372313,-0.756583,0.879003,-0.478608,-0.773509,0.239350,-0.643248,0.267386,-0.315868,0.483050,0.800294,0.605388,-0.065303,0.837002,0.880210,0.170575,-0.726536,0.275786,0.660672,0.963973,-0.256740,-1.178301,0.871771,0.346609,-0.756408,0.727438,0.713314,0.022269,1.066041,-0.234865,0.281551,-0.129254,-0.102155,0.568477,-0.870778,-0.438771,-0.126671,0.226109,0.170000,0.269642,0.591736,-0.723447,0.881546,0.623322,0.690803,0.140110,0.479920,-0.389305,-0.432216,-0.660778,-0.442644,0.111226,-0.481501,-0.104834,0.351064,-0.157768,0.764610,-0.846011,-0.863164,0.560283,-0.162880,-0.211532,0.037637,0.810679,-0.071335,0.936632,-0.238381,-0.020596,-0.794765,-0.360870,0.585720,1.071156,0.439666,-0.532929,-0.685471,0.789619,0.492329,-0.628057,0.721130,-0.596444,-0.872240,0.799296,-0.353312,-0.578384,-0.426399,1.135845,-0.496502,0.679057,-0.134857,-0.083339,0.423465,-0.029921,-0.535292,-0.263511,-0.970621,0.539474,-0.307413,0.722854,-0.445376,0.180573,0.425623,-0.734356,-0.754465,-0.206072,0.317813,-0.624937,-0.224577,-0.124408,-0.938670,0.802521,0.316089,-0.343350,-0.770944,0.825482,0.966248,-0.189372,-0.614298,0.366203,-0.557783,-0.384476,0.354664,0.059353,0.148867,0.399628,-0.856077,0.875886,0.415836,-0.997786,0.945016,-0.873934,-0.860031,-0.150989,-0.224870,0.292124,0.933812,-0.475059,0.864427,-0.691573,-0.973219,-0.170979,0.885877,0.281668,-0.056843,-0.483128,0.582781,0.116847,0.919624,0.350932,0.896321,0.724215,0.228422,0.062449,-0.866179,0.459088,0.112623,-0.119093,0.280549,-0.463944,0.276219,0.100400,0.566117,0.380701,-0.352981,-0.627819,0.291226,0.209828,0.715511,0.865795,0.001810,-0.083043,-0.986710,-0.065764,0.028883,-0.487054,0.062638,0.391438,-0.414689,-0.192282,0.968292,-0.672979,-0.842171,-0.922531,0.392906,-0.748765,0.461849,-0.802822,1.045310,-0.396591,0.385076,0.117649,0.733157,0.929326,-0.732386,0.267344,0.771549,0.535909,0.972991,0.575046,0.569034,0.397579,0.243199,-0.545314,-0.594614,0.099990,-0.179668,-0.824723,0.959328,0.214388,0.654489,1.051760,0.328311,-0.873913,-0.546768,0.700313,-0.009698,0.106966,-0.477391,0.134189,0.620685,0.294203,0.376517,-0.451484,0.854797,-0.151145,-0.739496,-0.652109,0.650975,0.637307,0.902016,-0.824306,-0.768047,0.591153,0.085200,0.747183,-0.667113,-0.473865,0.800618,-0.382948,0.538710,0.976322,-0.482468,-0.001708,-0.725923,0.005650,0.979831,0.751194,-0.388134,-0.148555,0.103689,-0.439716,-0.139943,-0.001048,0.558495,0.146620,0.349112,-0.903720,-0.071846,-0.560384,-0.061669,-0.837349,0.470193,0.744833,-0.655463,0.529300,-0.434642,-0.289733,0.991688,-1.041249,-0.402253,-0.602317,0.667545,-0.748933,0.845415,-0.408916,0.545088,0.428151,-0.074477,-0.506677,-0.084531,-0.034192,0.850468,0.261656,-0.675052,0.160219,-0.018621,-0.478321,-1.074920,-0.264470,0.893906,0.337235,-0.268056,-0.575353,-0.676319,0.898571,-0.647743,0.484050,-0.790142,0.528070,-0.844978,-0.514580,-0.874706,-0.566605,0.109687,0.176806,-0.394502,0.091283,0.801571,0.432053,0.599993,0.151712,0.043051,-0.035807,0.550285,0.646125,0.618079,-0.784002,0.733979,-0.243826,-0.916079,-0.523976,0.460620,-0.467366,0.180992,-0.976190,0.775618,-0.948780,-0.881043,0.194346,0.337357,-0.665549,0.054461,-0.556125,0.987465,-0.762165,0.780550,0.276639,-0.028386,0.808559,-0.900745,-0.396616,-0.791203,-0.421876,0.749486,0.336001,0.399965,-0.543211,0.636927,0.112027,0.224877,0.105399,0.010110,0.839236,0.795880,0.281525,0.678481,-0.952378,-0.080876,-0.469757,-0.054892,-0.631566,-0.743541,-0.613569,0.403468,0.171497,0.593181,0.518673,0.520600,0.146745,-0.508615,-0.320049,0.412859,0.520861,-0.815935,-0.354639,-0.356029,-0.167818,-0.632600,0.290515,-0.032406,0.630613,-0.833559,-0.038872,0.837168,0.161811,0.975605,-0.019576,0.431295,0.544724,-0.028164,-0.733565,-0.004995,-1.087763,-0.939483,-0.792752,-0.113281,-0.057184,0.127448,0.292722,-0.591720,0.784456,-0.909207,0.862236,0.432875,-1.039569,0.762362,0.357228,0.020039,0.731359,0.830099,-0.610927,0.109877,0.496772,0.147614,0.612271,-0.151012,-0.061704,-0.978054,-0.396478,0.345982,-0.190250,-0.334180,0.632977,0.038188,-0.609857,-0.578957,-0.737938,0.021105,0.572789,0.474554,0.579569,0.439740,-0.411260,-0.296820,-0.468640,0.840966,-0.035110,-0.476024,-0.160887,0.686245,-0.097876,-0.002031,-0.558714,0.871886,-0.577859,0.788821,1.028733,0.089183,0.748808,0.920903,-0.451239,0.339919,-0.212129,0.031250,0.834970,0.650556,-0.417716,-0.916505,-0.923122,-0.841562,-0.076439,0.029318,0.130368,-0.377989,-0.395522,0.869962,-0.976087,-0.599973,-0.171886,0.432216,-0.328335,1.013392,-0.593311,-0.668796,0.481643,0.318958,0.781798,0.291409,-0.035502,0.014889,-0.118547,-0.804663,0.806351,-0.697149,0.321087,0.171999,-0.768239,0.327564,-0.926431,-0.219405,0.666772,0.760904,-0.565778,-0.582555,-0.873366,0.061910,0.728648,-0.372084,0.839267,0.303032,0.613736,0.388496,0.732114,-0.924138,0.331820,-0.291256,-0.020457,0.940981,0.866760,-0.109984,-0.213932,-0.376920,-1.055117,-0.450113,0.107917,-0.649514,-0.093589,-0.834236,-0.158516,-0.795134,0.503258,-0.439473,-0.830336,0.449782,0.725828,0.052295,0.731406,-0.302926,-0.393744,-0.685902,0.269752,-0.820900,-0.477917,-0.217287,-0.872064,-0.138020,-0.238775,-0.359925,-0.506827,-0.253380,0.774767,0.022837,0.908901,-0.474164,0.312014,0.745939,0.811952,-0.371411,0.369010,0.072027,0.704172,0.249186,0.271150,0.652329,0.353221,-0.850453,-0.845598,-0.917907,0.912597,-0.472463,-0.073447,-0.444172,0.239487,-0.036896,0.558685,0.409384,0.131236,0.367632,0.013305,0.650247,-0.901589,0.327872,-0.092121,0.665447,0.259862,0.854990,1.004305,-0.058019,-0.559772,-0.867933,0.835773,0.372984,-0.777933,-0.643459,0.596583,-0.712816,0.643551,-0.730844,0.719502,0.097451,-0.767278,0.424017,-0.778921,0.176717,-0.545610,0.905657,0.745544,-0.609905,-0.129660,0.674621,0.530509,0.838942,-0.408474,0.958772,-0.891961,-0.290187,-0.311518,-0.589610,0.331152,0.419364,0.065156,-0.261738,0.100980,-0.188273,0.626225,0.321345,-0.802780,-0.076128,0.401272,-0.239319,-0.377689,-0.016518,-0.669240,0.683825,-1.196017,0.427446,0.269574,0.126820,0.597267,0.866551,-0.774699,-0.787035,0.376029,-0.574465,-0.893471,-0.172872,-0.908970,-0.230942,0.756687,-0.454560,0.774278,-0.843661,-0.767899,-0.958369,1.011246,0.359641,-0.387101,-0.929224,-0.582987,-0.655293,-0.644871,0.371475,-0.112912,0.203185,-0.942832,0.532883,-0.211625,-0.769401,0.728174,1.010099,-0.639715,-0.188561,0.762275,0.635903,0.056587,-0.772515,-0.325850,-0.588796,0.423612,-0.267880,0.666808,-0.483825,-0.602249,0.614397,0.107476,-0.406996,-0.021062,0.260169,-0.094722,0.227452,0.840806,-0.327006,-0.016947,-0.444835,-0.769134,-0.488021,-0.460983,0.846332,-0.527924,-0.755192,-1.038170,0.816026,-0.511396,0.827233,0.665747,-0.318884,-0.914257,-0.901011,0.825026,-0.012614,0.147764,-0.992415,-0.115152,0.857495,-0.826450,-0.233688,0.615517,0.249282,-0.281684,-0.654585,0.548636,0.223607,0.568721,0.639261,0.213590,-0.414897,0.821359,-0.903408,0.437843,0.547799,-0.853404,-0.209966,-0.663050,-0.620902,-0.802468,-0.509734,-0.100798,0.134178,-0.846961,-0.267363,0.853700,-0.720627,0.660698,0.317609,0.313618,-0.221596,-0.106428,-0.040002,0.513752,-0.864945,0.370515,0.720208,-0.114804,-0.283118,-0.277800,0.086057,0.128683,-0.728663,0.870555,-0.815279,0.220418,0.107230,0.010238,0.761861,0.411604,-0.453527,-0.380455,0.638034,0.800800,-0.702568,0.565042,-0.429955,-0.880325,-0.558587,-0.607905,0.819487,-0.363228,0.633253,1.036692,-0.276221,0.382264,0.030792,-0.479279,0.234743,-0.919151,0.797531,-0.840953,-0.130669,-0.719309,0.346638,-0.863104,-0.168875,-0.877770,-0.425840,-0.321749,-0.216521,-0.400612,0.051963,0.383567,-0.930820,-0.468106,-0.078887,0.072864,0.854810,-0.821343,-0.776057,0.822303,-0.419985,-0.573832,0.760183,-0.345317,0.726229,0.331089,-0.444898,1.025953,0.281482,0.140748,-0.117058,0.667395,0.799857,0.356043,0.392084,-0.473962,0.024316,0.000911,0.432257,0.604421,0.112915,-0.175300,-0.426073,0.662780,-0.489028,-0.730256,0.835914,0.974891,0.555407,0.494025,0.755934,0.056987,-0.967990,-0.115661,-0.770265,-0.686429,0.304906,-0.098333,-0.346863,0.371365,0.369141,0.856182,0.060103,0.938254,-0.403479,-0.180803,0.236452,-0.251266,0.908996,0.845780,0.961412,-0.912612,0.595545,-0.237707,1.036772,0.972373,0.213330,-0.064653,-0.703842,-0.555212,-0.825985,0.540613,0.947273,-0.099300,0.065357,-0.079434,0.179743,-0.239379,0.764232,-0.152081,0.656726,-0.378548,0.772265,-0.725056,0.599835,0.253467,0.869639,0.119990,0.038552,-0.441839,-0.099831,-0.868082,0.975902,0.675602,0.997011,0.069706,-0.599636,-0.429048,-0.910379,0.265354,-0.460305,-0.715148,0.086895,0.099736,0.635236,-0.698321,0.254430,-0.484174,-0.702547,0.322272,0.441817,-0.653153,-0.296188,-0.069849,-0.424237,-0.764938,-0.187247,0.858594,-0.810869,0.967905,0.906436,0.878387,0.882842,0.569027,0.602839,-0.987401,0.704287,0.814069,-0.224460,-0.882413,0.674541,-0.367468,0.727510,0.889591,-0.682036,0.967476,-0.078090,-0.540021,-0.011594,-0.529347,0.510399,-0.497512,-0.651079,0.751507,0.526387,-0.691201,-0.965738,-0.702002,0.640513,0.884028,0.122055,0.207075,0.596626,0.775595,0.562580,-0.334696,-0.499899,-0.283077,0.417139,-0.427769,0.182638,-0.516598,-0.952122,-0.386399,-0.870359,-0.455752,-0.854143,0.909316,0.373591,0.703175,-0.565084,0.600141,-0.436339,0.732471,-1.002532,0.360131,-0.072639,-0.100896,-0.704607,0.063198,-0.583383,-0.098357,-0.113042,0.308778,-0.690693,0.072953,0.691521,0.010704,-0.145616,0.580731,0.295487,0.696700,-0.908465,-0.836391,0.635896,-0.486739,0.517913,-0.677581,-0.749466,0.562847,0.978749,-0.717755,0.399664,-0.844034,-0.058474,0.856831,-0.014423,-0.524272,-0.037144,-0.334210,0.769744,0.974421,0.781484,0.144691,0.014404,0.199361,0.029915,0.722955,-0.567610,0.449616,-0.176169,-0.490869,0.418309,-0.259339,0.392957,-0.236661,0.864887,0.636908,-0.412190,-0.755612,0.639167,-0.074966,0.022230,0.623472,0.703816,1.112227,-0.456287,-0.528886,0.887292,0.899306,0.648167,0.180898,0.468725,-0.090327,-0.678698,0.124057,-0.824550,0.440004,0.206817,0.370955,-0.688503,-0.205295,0.809582,0.106784,-0.777138,0.414753,-0.400398,0.325022,0.256232,-0.353655,0.639162,-0.290522,-0.647788,0.295290,0.508296,0.838273,0.152214,-0.585224,-0.453936,-0.187564,0.414751,-0.526481,0.012869,-0.634497,0.491562,0.009331,-1.016180,0.212756,-0.732888,0.235633,0.256905,0.766427,-0.229494,0.610960,-0.963605,0.713348,-0.230821,0.076224,0.424450,0.376029,0.209609,-0.791303,0.804591,0.099484,-0.745434,-0.196247,0.169234,0.513024,0.108088,-0.582006,0.197436,-0.294928,0.462438,-0.915073,-0.111033,0.894654,-0.374274,-0.843856,0.621664,-0.109252,0.673443,0.270777,-0.653454,-0.044177,0.204529,-0.052616,-0.423625,0.356698,0.543993,0.447605,-0.321439,0.717376,0.894828,0.419030,-0.829579,-0.393452,0.890555,-0.966624,0.646634,-0.913790,-0.298829,0.867518,0.965418,-0.901007,-0.901555,0.299431,0.445177,-0.485253,-0.247720,-0.580313,-0.746477,-0.386856,0.363103,-0.965891,-0.084868,0.665751,0.821492,-0.819582,0.548790,0.176033,0.090159,0.324305,-0.154166,-0.334086,0.592461,0.311593,0.593411,-0.237974,0.096725,0.475905,-0.829447,0.588114,-0.339851,0.296564,0.929369,-1.037035,0.227248,1.036322,-0.213026,-0.168210,-0.507362,-0.289809,0.591434,-0.601650,0.829674,0.170710,0.211215,-0.696928,0.689857,-0.180652,0.751418,-0.259554,0.039239,-0.413941,0.280825,0.653515,0.711093,0.323449,-0.236671,-0.414189,-0.081409,0.051972,0.024727,-0.682284,0.153382,-0.073416,0.203056,-0.685579,0.648720,0.905445,-0.995972,0.598208,0.123217,-0.394151,0.773299,-0.235019,0.504341,-0.300559,0.719522,0.989821,0.669984,0.457493,0.585781,-0.413135,-0.622241,0.723142,0.311644,0.713175,0.220500,0.525194,-0.017967,-0.560374,0.439609,0.387522,-0.076859,0.135861,0.610213,-0.161725,-0.316196,0.917273,0.857644,-0.660536,0.866314,0.401128,0.575244,-0.344071,-0.439826,0.330001,0.938215,0.766933,0.350529,0.023378,0.767018,-0.651700,0.748835,0.343205,0.566283,0.356393,-0.460830,-0.743412,-0.544489,0.367287,0.645545,0.239339,0.466221,-0.162689,0.108500,0.068959,0.258384,-0.122012,-0.784689,0.746617,0.085897,-0.194776,-0.088041,0.153689,-0.500000,0.980321,-0.199776,1.004753,-0.551083,-0.323223,-0.911165,-0.582222,-0.558225,-0.291650,0.068074,0.286386,-1.078387,1.416625,0.774235,-1.149232,0.641147,-0.767968,-0.540507,0.960858,-0.370608,0.165445,-0.231711,0.167903,-0.413016,-0.133094,0.028495,-0.149239,-0.876053,1.123042,-1.439909,1.258404,-0.196136,0.000073,-0.822613,0.875634,-0.387562,0.454693,-0.465278,-0.060445,0.701375,-0.615665,-0.215824,0.588297,0.273623,0.205108,-0.694249,-0.006959,-1.122948,0.364709,0.364289,-0.690768,0.017596,-0.460781,-0.482909,0.886429,-0.514526,-0.998154,0.127286,0.343642,-0.981547,0.516298,-0.829488,0.647198,-1.391892,0.822655,-0.144450,0.662609};
        //inital values for each input
        float inputValues[48] = {0};
        float innerValues[40] = {0};
        float outputValues[2] = {0};
        //Initialize inputs
        int k, a;
        for(k = 0; k < inputLayer; k++)
        {
            if(gameBoard[k] == 2)
            {
                inputValues[k] = -1;
            }
            else
            {
                inputValues[k] = gameBoard[k];
            }
        }

        //Calculate values for inner layer
        for(k = 0; k < innerLayer; k++)
        {
            float sum = 0;
            for(a = 0; a < inputLayer; a++)
            {
                sum += inputValues[a] * netWeights[(a * innerLayer) + k];
            }
            innerValues[k] = 1. / (1. + pow(M_E,sum * -1));
        }

        //calculate the values for the outer layer
        for(k = 0; k < outputLayer; k++)
        {
            float sum = 0;
            for(a = 0; a < innerLayer; a++)
            {
                sum += innerValues[a] * netWeights[(inputLayer * innerLayer) + (a * outputLayer) + k];
            }
            outputValues[k] = 1. / (1. + pow(M_E,sum * -1));
        }

        //map neural net output to a range of -100 to 100
        float inMin = 0;
        float inMax = 1;
        float outMin = -100;
        float outMax = 100;

        int result;
        if(team == 1)
        {
            result = (int) (outMin + (outMax - outMin) * (outputValues[0] - inMin) / (inMax - inMin));
        }
        else
        {
            result = (int) (outMin + (outMax - outMin) * (outputValues[1] - inMin) / (inMax - inMin));
        }

        return result;
    }
}

@end
